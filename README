
- [DESCRIPTION

ECFS is an extension to the existing ELF core file format in Linux. 
Its job is to intercept the Linux core-dump handler, catch the core-dump
before it is written to disk, and carefully reconstruct it into an
ecfs-core file. An ecfs-core file is backwards compatible with regular
core files but has been extended in such a way that they boast prolific
amounts of data useful for process forensics analysis. An ecfs-file
is not limited to just ELF program headers, but also contains many section
headers as well as fully reconstructed relocation and symbol tables that
reflect the state of code and data in runtime. ecfs-core files are
also extremely straight forward to parse, moreso when using the
complementary libecfs C library (Python bindings are a work in progress).
See the manual page which describes how to access the different ecfs-core
components in-depth.


- [SYNOPSIS - Extended core file snapshot technology-

This source code contains the ecfs suite of software which has several
components. The primary component plugs ecfs-core dump functionality 
into the Linux core dump routine. The secondary component being libecfs
which is a library specifically designed to parse ecfs-core files with
ease.

On 64bit Linux systems this software is also cross compiled for 32bit
so that a 32bit-handler can be dispatched in order to handle 32bit processes.
This requires that both 32bit and 64bit versions of libdwarf and libelf
be installed on your system simultaneously. On ubuntu systems libelf-dev package
allows for this but libdwarf package does not. To get around this you may
link against the deps/libdwarf32.a and deps/libdwarf64.a files contained
within. 

Once compiled and installed you will notice that /opt/ecfs/bin contains
3 files: 
/opt/ecfs/bin/ecfs_handler
/opt/ecfs/bin/ecfs32
/opt/ecfs/bin/ecfs64

The ecfs_handler is more or less a stub program that detects whether a process
is 32bit or 64bit, and then invokes the appropriate ecfs worker (ecfs32 or ecfs64).

ecfs-core files will be dumped in /opt/ecfs/cores and typically take up more
space (especially if -t option is being used) than regular core files. 

The main/readecfs.c utility is the equiavalent of what readelf is for regular
ELF files. readecfs parses and prints the details of an ecfs-core file to 
stdout. This utility uses libecfs as an example of how to use its API.

- [INSTALL -

Dependecies:
(Note: deps/libdwarf32.a and deps/libdwarf64.a can be used)
apt-get install libelf-dev libelf-dev:i386 libdwarf-dev

To build ecfs type:
sudo ./setup.sh 

Or

make V=prod B=32
make V=prod B=64
sudo make install


This should put a custom line into /proc/sys/kernel/core_pattern that tells it
to invoke /opt/ecfs/bin/ecfs during a coredump.

XXX NOTE XXX:
If you see '-t' being passed to ecfs in setup.sh this means that it
will write the entire text segment of each shared library (vs. just
the first 4k). ecfs ALWAYS writes the entire text segment of the executable
but limits the text of each shlib to only 4k unless you specify -t.
Which means opts.text_all is set in ecfs.c. Having -t set will cause
ecfs to take much longer as it has to write out sometimes hundreds of 
megabytes of code segments.

After this, you should observe that when a program crashes it creates
an ECFS file in /opt/ecfs/cores/<some_file>.pid

These files are of type ET_NONE so that objdump can read the section
headers, but if you want to use the file as a core file mark it as
ET_CORE before using with GDB.

After a reboot you will have to run setup.sh again if you don't echo
the following line into one of two files:

(For systemd based systems like arch Linux)

/usr/lib/sysctl.d/50-coredump.conf


(For ubuntu and other systems that don't use systemd)

/etc/sysctl.conf

NOTE: Although it seems that the init scripts for apport (in ubuntu) will override
this change. Until I design a proper script to make ecfs instal permanent you
must overwrite /proc/sys/kernel/core_pattern with a line like:
	

'|/opt/ecfs/bin/ecfs_handler -t -e %e -p %p -o /opt/ecfs/cores/%e.%p'

The line you want to echo into one of the files above:

kernel.core_pattern=|/opt/ecfs/bin/ecfs_handler -i -e %e -p %p -o /opt/ecfs/cores/%e.%p

(For example):

echo 'kernel.core_pattern=|/opt/ecfs/bin/ecfs_handler -i -e %e -p %p -o /opt/ecfs/cores/%e.%p' >> /etc/sysctl.conf

- [ECFS LOGGING/DEBUGGING -

Debug output is logged using syslog() and can be found in either /var/log/syslog or
on some systems such as arch Linux you will need to look at 'journalctl -b'

- [ECFS HEURISTICS -

ecfs can perform heuristics that do things such as mark shared libraries as being DLL injected.
Sometimes false positives can arise. If you want to use the heuristics feature use the -h switch.
For instance:

echo 'kernel.core_pattern=|/opt/ecfs/bin/ecfs_handler -i -h -e %e -p %p -o /opt/ecfs/cores/%e.%p' >> /etc/sysctl.conf


- elfmaster[at]zoho.com
